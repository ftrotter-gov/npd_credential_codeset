#!/usr/bin/env python3
"""
Credential Mapping Export Tool

This script exports credential_text_map data partitioned by credential into individual SQL files.
Each file contains INSERT statements for one credential's mappings to enable manual review and editing.

Usage:
    python3 export_credential_mappings.py /path/to/output/directory/
    python3 export_credential_mappings.py ../npd_credentialmap/map/

Output:
    Creates individual SQL files in specified output directory
    Files named as insert_into_{sanitized_credential}.sql
"""

import npd_plainerflow  # type: ignore
from npd_plainerflow import ConfigNoir, DBTable, FrostDict, SQLoopcicle  # type: ignore
import os
import sys
import re
import pandas as pd
from pathlib import Path


class CredentialMappingExporter:
    """
    Exports credential mapping data into individual SQL files per credential.
    """
    
    @staticmethod
    def sanitize_filename(credential_abbr: str) -> str:
        """
        Sanitize credential abbreviation for use in filenames.
        Replace all special characters with underscores.
        
        Args:
            credential_abbr: Raw credential abbreviation (e.g., "OTR/L", "PA-C")
            
        Returns:
            Sanitized filename-safe string (e.g., "OTR_L", "PA_C")
        """
        # Replace any non-alphanumeric character with underscore
        sanitized = re.sub(r'[^a-zA-Z0-9]', '_', credential_abbr)
        # Remove multiple consecutive underscores
        sanitized = re.sub(r'_+', '_', sanitized)
        # Remove leading/trailing underscores
        sanitized = sanitized.strip('_')
        return sanitized
    
    @staticmethod
    def create_insert_sql(credential_abbr: str, credential_id: int, mappings_df: pd.DataFrame) -> str:
        """
        Generate INSERT SQL statements for a single credential's mappings.
        
        Args:
            credential_abbr: Credential abbreviation for comments
            credential_id: Credential ID number
            mappings_df: DataFrame containing raw_credential_text and credential_id
            
        Returns:
            Complete SQL string with INSERT statements
        """
        if mappings_df.empty:
            return f"-- No mappings found for credential: {credential_abbr} (ID: {credential_id})\n"
        
        sql_lines = [
            f"-- Credential Mappings for: {credential_abbr} (ID: {credential_id})",
            f"-- Generated by export_credential_mappings.py",
            f"-- Total mappings: {len(mappings_df)}",
            "",
        ]
        
        # Create INSERT statements - using individual INSERTs for readability
        for _, row in mappings_df.iterrows():
            raw_text = row['raw_credential_text']
            # Escape single quotes in the raw text
            escaped_text = raw_text.replace("'", "''")
            sql_lines.append(
                f"INSERT INTO dctnry.credential_text_map (raw_credential_text, credential_id) "
                f"VALUES ('{escaped_text}', {credential_id});"
            )
        
        return "\n".join(sql_lines) + "\n"
    
    @staticmethod
    def create_null_insert_sql(null_mappings_df: pd.DataFrame) -> str:
        """
        Generate INSERT SQL statements for NULL credential mappings (unmapped entries).
        
        Args:
            null_mappings_df: DataFrame containing raw_credential_text with NULL credential_id
            
        Returns:
            Complete SQL string with INSERT statements for NULL mappings
        """
        if null_mappings_df.empty:
            return "-- No NULL mappings found\n"
        
        sql_lines = [
            "-- NULL Credential Mappings (Unmapped Entries)",
            "-- Generated by export_credential_mappings.py", 
            f"-- Total NULL mappings: {len(null_mappings_df)}",
            "-- These entries map to NULL (no specific credential assigned)",
            "",
        ]
        
        # Create INSERT statements for NULL mappings
        for _, row in null_mappings_df.iterrows():
            raw_text = row['raw_credential_text']
            # Escape single quotes in the raw text
            escaped_text = raw_text.replace("'", "''")
            sql_lines.append(
                f"INSERT INTO dctnry.credential_text_map (raw_credential_text, credential_id) "
                f"VALUES ('{escaped_text}', NULL);"
            )
        
        return "\n".join(sql_lines) + "\n"
    
    @staticmethod
    def main():
        """
        Main execution function for credential mapping export.
        """
        if len(sys.argv) != 2:
            print("Usage: python3 export_credential_mappings.py /path/to/output/directory/", file=sys.stderr)
            print("", file=sys.stderr)
            print("Example:", file=sys.stderr)
            print("  python3 export_credential_mappings.py ../npd_credentialmap/map/", file=sys.stderr)
            print("  python3 export_credential_mappings.py /full/path/to/npd_credentialmap/map/", file=sys.stderr)
            sys.exit(1)
        
        output_dir = sys.argv[1]
        
        # Control dry-run mode - start with False since this is a read operation
        is_just_print = False
        
        print("üîç Starting credential mapping export...")
        print(f"üìÅ Target output directory: {output_dir}")
        print("Connecting to database...")
        
        # Define and load configuration files
        base_path = os.path.dirname(os.path.abspath(__file__))
        env_location = os.path.abspath(os.path.join(base_path, "..", "data_import_scripts", ".env"))
        data_settings_location = os.path.abspath(os.path.join(base_path, "..", "data_import_scripts", "data_file_locations.env"))
        
        settings = ConfigNoir.detect_and_load_config(
            config_files=[env_location, data_settings_location], 
            verbose=True
        )
        
        if settings._sql_alchemy_engine:
            alchemy_engine = settings._sql_alchemy_engine
        else:
            raise RuntimeError(f"Failed to connect to the database: {settings.database_connection_error_message}")
        
        # Define database table references
        credential_DBTable = DBTable(schema='dctnry', table='credential')
        credential_text_map_DBTable = DBTable(schema='dctnry', table='credential_text_map')
        
        print("üìä Loading credential data...")
        
        # Load all credentials
        credentials_sql = f"""
        SELECT id, credential_abbr, credential_name 
        FROM {credential_DBTable} 
        ORDER BY id
        """
        credentials_df = pd.read_sql(credentials_sql, alchemy_engine)
        
        print(f"Found {len(credentials_df)} credentials to process")
        
        # Load all credential text mappings
        mappings_sql = f"""
        SELECT 
            ctm.raw_credential_text,
            ctm.credential_id,
            c.credential_abbr
        FROM {credential_text_map_DBTable} AS ctm
        INNER JOIN {credential_DBTable} AS c ON ctm.credential_id = c.id
        ORDER BY c.id, ctm.raw_credential_text
        """
        mappings_df = pd.read_sql(mappings_sql, alchemy_engine)
        
        # Load NULL credential mappings (unmapped entries)
        null_mappings_sql = f"""
        SELECT 
            ctm.raw_credential_text,
            ctm.credential_id
        FROM {credential_text_map_DBTable} AS ctm
        WHERE ctm.credential_id IS NULL
        ORDER BY ctm.raw_credential_text
        """
        null_mappings_df = pd.read_sql(null_mappings_sql, alchemy_engine)
        
        print(f"Found {len(mappings_df)} credential mappings with IDs")
        print(f"Found {len(null_mappings_df)} NULL credential mappings")
        print(f"Total mappings: {len(mappings_df) + len(null_mappings_df)}")
        
        # Create output directory (make it absolute path)
        output_dir = os.path.abspath(output_dir)
        
        # Validate/create output directory
        try:
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            print(f"üìÅ Output directory: {output_dir}")
        except Exception as e:
            print(f"‚ùå Error creating output directory {output_dir}: {e}", file=sys.stderr)
            sys.exit(1)
        
        # Process each credential
        exported_count = 0
        skipped_count = 0
        
        for _, credential in credentials_df.iterrows():
            credential_id = credential['id']
            credential_abbr = credential['credential_abbr']
            credential_name = credential['credential_name']
            
            # Get mappings for this credential
            credential_mappings = mappings_df[mappings_df['credential_id'] == credential_id]
            
            if credential_mappings.empty:
                print(f"  ‚ö†Ô∏è  Skipping {credential_abbr} (ID: {credential_id}) - no mappings found")
                skipped_count += 1
                continue
            
            # Generate sanitized filename
            sanitized_abbr = CredentialMappingExporter.sanitize_filename(credential_abbr)
            filename = f"insert_into_{sanitized_abbr}.sql"
            filepath = os.path.join(output_dir, filename)
            
            # Generate SQL content
            sql_content = CredentialMappingExporter.create_insert_sql(
                credential_abbr, credential_id, credential_mappings
            )
            
            # Write file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(sql_content)
            
            print(f"  ‚úÖ Exported {len(credential_mappings)} mappings for {credential_abbr} ‚Üí {filename}")
            exported_count += 1
        
        # Process NULL mappings (unmapped entries)
        if not null_mappings_df.empty:
            filename = "insert_into_NULL.sql"
            filepath = os.path.join(output_dir, filename)
            
            # Generate SQL content for NULL mappings
            sql_content = CredentialMappingExporter.create_null_insert_sql(null_mappings_df)
            
            # Write file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(sql_content)
            
            print(f"  ‚úÖ Exported {len(null_mappings_df)} NULL mappings ‚Üí {filename}")
            exported_count += 1
        else:
            print(f"  ‚ÑπÔ∏è  No NULL mappings found")
        
        print("\nüìã Export Summary:")
        print(f"  ‚Ä¢ Total credentials processed: {len(credentials_df)}")
        print(f"  ‚Ä¢ Files exported: {exported_count}")
        print(f"  ‚Ä¢ Credentials skipped (no mappings): {skipped_count}")
        print(f"  ‚Ä¢ Credential mappings exported: {len(mappings_df)}")
        print(f"  ‚Ä¢ NULL mappings exported: {len(null_mappings_df)}")
        print(f"  ‚Ä¢ Total mappings exported: {len(mappings_df) + len(null_mappings_df)}")
        print(f"  ‚Ä¢ Output directory: {output_dir}")
        
        print("\n‚úÖ Credential mapping export completed successfully!")
        print("\nNext steps:")
        print("1. Review individual SQL files for accuracy")
        print("2. Manually edit mappings as needed")
        print("3. Use merge_credential_mappings.py to create consolidated SQL file")


if __name__ == "__main__":
    try:
        CredentialMappingExporter.main()
    except Exception as e:
        print(f"\n‚ùå Credential mapping export failed with error: {e}")
        print("\nMake sure you have installed the required dependencies:")
        print("pip install npd_plainerflow pandas")
        raise
