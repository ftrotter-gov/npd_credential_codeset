#!/usr/bin/env python3
"""
SQL File Merger

Merges all SQL files from ./sql/ directory into a single merged.sql file.
Files are ordered by type: create_, insert_, then index_ prefixed files.
"""

import os
import glob
from pathlib import Path


class SqlMerger:
    """Handles merging SQL files into a single output file."""
    
    @staticmethod
    def merge_sql_files(*, sql_directory: str = "./sql/", output_file: str = "./merged_sql/merged.sql") -> None:
        """
        Merge all SQL files from the source directory into a single output file.
        
        Args:
            sql_directory: Directory containing SQL files to merge
            output_file: Path for the merged output file
        """
        try:
            # Ensure output directory exists
            SqlMerger._ensure_output_directory(output_path=output_file)
            
            # Get and categorize SQL files
            sql_files = SqlMerger._get_categorized_sql_files(sql_directory=sql_directory)
            
            # Write merged SQL file
            SqlMerger._write_merged_sql_file(sql_files=sql_files, output_file=output_file)
            
            print(f"Successfully merged {len(sql_files['create']) + len(sql_files['insert']) + len(sql_files['index'])} SQL files into {output_file}")
            
        except Exception as e:
            raise Exception(f"SqlMerger.merge_sql_files Error: Failed to merge SQL files - {str(e)}")
    
    @staticmethod
    def _ensure_output_directory(*, output_path: str) -> None:
        """Ensure the output directory exists."""
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
    
    @staticmethod
    def _get_categorized_sql_files(*, sql_directory: str) -> dict:
        """
        Get all SQL files from directory and categorize by prefix.
        
        Args:
            sql_directory: Directory to search for SQL files
            
        Returns:
            Dictionary with categorized file lists
        """
        if not os.path.exists(sql_directory):
            raise FileNotFoundError(f"SqlMerger._get_categorized_sql_files Error: SQL directory not found - {sql_directory}")
        
        # Get all .sql files
        sql_pattern = os.path.join(sql_directory, "*.sql")
        all_sql_files = glob.glob(sql_pattern)
        
        if not all_sql_files:
            raise FileNotFoundError(f"SqlMerger._get_categorized_sql_files Error: No SQL files found in {sql_directory}")
        
        # Categorize files by prefix
        categorized_files = {
            'create': [],
            'insert': [],
            'index': []
        }
        
        for file_path in all_sql_files:
            filename = os.path.basename(file_path)
            
            if filename.startswith('create_'):
                categorized_files['create'].append(file_path)
            elif filename.startswith('insert_'):
                categorized_files['insert'].append(file_path)
            elif filename.startswith('index_'):
                categorized_files['index'].append(file_path)
            else:
                print(f"Warning: File {filename} does not match expected naming pattern (create_, insert_, index_)")
        
        # Sort files within each category for consistent output
        for category in categorized_files:
            categorized_files[category].sort()
        
        return categorized_files
    
    @staticmethod
    def _write_merged_sql_file(*, sql_files: dict, output_file: str) -> None:
        """
        Write all SQL files to the merged output file with proper formatting.
        
        Args:
            sql_files: Dictionary of categorized SQL files
            output_file: Path for the output file
        """
        with open(output_file, 'w', encoding='utf-8') as output_handle:
            # Write header
            output_handle.write("-- Merged SQL File\n")
            output_handle.write("-- Generated by merge_sql.py\n")
            output_handle.write("-- Files are ordered: create_, insert_, index_\n\n")
            
            # Process files in order: create, insert, index
            for category in ['create', 'insert', 'index']:
                if sql_files[category]:
                    output_handle.write(f"-- ==================== {category.upper()} FILES ====================\n\n")
                    
                    for file_path in sql_files[category]:
                        SqlMerger._write_sql_file_content(
                            file_path=file_path,
                            output_handle=output_handle
                        )
    
    @staticmethod
    def _write_sql_file_content(*, file_path: str, output_handle) -> None:
        """
        Write a single SQL file's content to the output handle with proper formatting.
        
        Args:
            file_path: Path to the SQL file to read
            output_handle: File handle for writing output
        """
        filename = os.path.basename(file_path)
        
        try:
            # Write file start comment
            output_handle.write(f"-- File Start: {filename}\n")
            output_handle.write(f"-- Source: {file_path}\n\n")
            
            # Read and write file content
            with open(file_path, 'r', encoding='utf-8') as sql_file:
                content = sql_file.read().strip()
                if content:
                    output_handle.write(content)
                    output_handle.write("\n\n")
            
            # Write file end comment
            output_handle.write(f"-- File End: {filename}\n\n")
            output_handle.write("-- " + "=" * 50 + "\n\n")
            
        except Exception as e:
            raise Exception(f"SqlMerger._write_sql_file_content Error: Failed to process {file_path} - {str(e)}")


def main():
    """Main function to execute SQL file merging."""
    try:
        SqlMerger.merge_sql_files()
    except Exception as e:
        print(f"merge_sql.py Error: {str(e)}")
        exit(1)


if __name__ == "__main__":
    main()
